<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="daedan.mes.dept.mapper.DeptMapper">
    <insert id="appendDeptInfo" parameterType="map"  >
    insert into dept_info (
          par_dept_no
        , dept_no
        , dept_nm
        , cust_no
        , used_yn
        , reg_id
        , reg_ip
        , reg_dt
        , mod_id
        , mod_ip
        , mod_dt
        ) values (
          #{parDeptNo}
        , #{deptNo}
        , #{deptNm}
        , #{custNo}
        , #{usedYn}
         ,#{userId}
		 ,#{ipaddr}
		 ,now()
		  ,#{userId}
		 ,#{ipaddr}
		 ,now()
        )
    </insert>
    <select id="getDeptList" parameterType="map"  resultType="camelMap">
        /* 부서트리 (deptMapper.getDeptList) */
        WITH recursive cte (
               cust_no
            ,  par_dept_no
            , dept_no
            , dept_nm
            , level
            , prt_seq
            , path
            , used_yn
            ) AS ( SELECT
                          a.cust_no
                        , a.par_dept_no
                        , a.dept_no
                        , a.dept_nm
                        , 1 AS level
                        , a.prt_seq
                        , lpad(a.dept_no::text,5,'0')
                        , a.used_yn
                   FROM  dept_info a
                   WHERE a.par_dept_no = #{custNo} * 1000
                   and   a.cust_no =#{custNo}
                   UNION ALL
                   SELECT
                          b.cust_no
                        , b.par_dept_no
                        , b.dept_no
                        , b.dept_nm
                        , c.level+1 AS level
                        , b.prt_seq
                        , path ||lpad(b.dept_no::text,5,'0')
                        , b.used_yn
                   FROM dept_info b JOIN cte c ON b.par_dept_no = c.dept_no
                  where b.cust_no =#{custNo}
                    and b.used_yn = 'Y'
        )
        SELECT * FROM cte
          order by path
    </select>

    <select id="getDeptListDepth" parameterType="map"  resultType="int">
        select max(a.level) as menu_depth
        from(
            WITH recursive cte (
                              cust_no
                            , par_dept_no
                            , dept_no
                            , dept_nm
                            , level
                            , prt_seq
                            , path
                            , used_yn
                ) AS ( SELECT a.cust_no
                            , a.par_dept_no
                            , a.dept_no
                            , a.dept_nm
                            , 1 AS level
                            , a.prt_seq
                            , lpad(a.dept_no::text,5,'0')
                            , a.used_yn
                       FROM  dept_info a
                       WHERE a.par_dept_no = #{custNo} * 1000
                         and a.cust_no =#{custNo}
                       UNION ALL
                       SELECT b.cust_no
                            , b.par_dept_no
                            , b.dept_no
                            , b.dept_nm
                            , c.level+1 AS level
                            , b.prt_seq
                            , path ||lpad(b.dept_no::text,5,'0')
                            , b.used_yn
                       FROM dept_info b JOIN cte c ON b.par_dept_no = c.dept_no
                       where b.cust_no =#{custNo}
                         and b.used_yn = 'Y'
            )
            SELECT * FROM cte
            order by path
        ) a
        --부서

    </select>

    <select id="getComboDeptList" parameterType="map"  resultType="camelMap">
        /* 콤보조직트리 (deptMapper.getComboDeptList) */
        WITH recursive cte (
                          par_dept_no
                        , dept_no
                        , dept_nm
                        , level
                        , prt_seq
                        , path
            ) AS ( SELECT a.par_dept_no
                        , a.dept_no
                        , a.dept_nm
                        , 1 AS level
                        , a.prt_seq
                        , lpad(a.dept_no::text,5,'0')
                   FROM  dept_info a
                   WHERE a.par_dept_no = #{custNo} * 1000
                    and a.cust_no = #{custNo}
                   UNION ALL
                   SELECT b.par_dept_no
                        , b.dept_no
                        , b.dept_nm
                        , c.level+1 AS level
                        , b.prt_seq
                        , path ||lpad(b.dept_no::text,5,'0')
                   FROM dept_info b JOIN cte c ON b.par_dept_no = c.dept_no
                 where b.cust_no = #{custNo}
                   and b.used_yn = 'Y'
        )
        SELECT dept_no as value
             , dept_nm as text
        FROM cte
        WHERE 1 = 1
        <if test="path != null and path != ''">
            and path = #{path}
        </if>
        order by path
    </select>

</mapper>